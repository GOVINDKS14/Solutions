class Solution {
    public int giveNonZero(int nums[], int idx){
        for(int i=idx+1;i<nums.length;i++){
            if(nums[i]!=0) return i;
        }
        return -1;
    }
    public int[] applyOperations(int[] nums) {
        for(int i=1;i<nums.length;i++){
            if(nums[i-1]==nums[i]){
                nums[i-1]*=2;
                nums[i]=0;
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0){
                int idx=giveNonZero(nums,i);
                if(idx!=-1){
                    int temp=nums[i];
                    nums[i]=nums[idx];
                    nums[idx]=temp;
                }
                else break;
            }
        }
        return nums;
    }
}

// SC - O(1)


/*
FOR SHIFTING ALL THE ZEROES AT THE END
Two pointer Approach

- If nums[0]==0, then we will try to find the non zero element after i=0.
- If we found, we will swap that element with nums[0].
Simulation:

[0,1,0,3,12]
[1,0,0,3,12]
[1,3,0,0,12]
[1,3,12,0,0]

- We will do it repeatedly if we found the element as zero.
- If the 'giveNonZero' function returns -1, we are sure that there is no non zero element is present after that index. In that case we will simply break the loop.
*/
